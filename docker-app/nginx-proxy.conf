# Nginx reverse proxy configuration for Face Detection App
# This demonstrates how to proxy multiple instances with different prefixes

# Upstream definitions
upstream face_detection_prefixed {
    server face-detection-prefixed:8080;
}

upstream face_detection_tenant_a {
    server face-detection-tenant-a:8080;
}

upstream face_detection_tenant_b {
    server face-detection-tenant-b:8080;
}

# Main server block
server {
    listen 80;
    server_name localhost;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Root redirect to main instance
    location = / {
        return 301 /face-detection/;
    }

    # Proxy to main face detection instance with prefix
    location /face-detection/ {
        proxy_pass http://face_detection_prefixed/face-detection/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle WebSocket connections if needed
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Proxy to tenant A
    location /tenant-a/ {
        proxy_pass http://face_detection_tenant_a/tenant-a/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Custom headers for tenant identification
        proxy_set_header X-Tenant-ID "tenant-a";
    }

    # Proxy to tenant B  
    location /tenant-b/ {
        proxy_pass http://face_detection_tenant_b/tenant-b/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Custom headers for tenant identification
        proxy_set_header X-Tenant-ID "tenant-b";
    }

    # Health check endpoint (no prefix needed)
    location /health {
        proxy_pass http://face_detection_prefixed/health;
        proxy_set_header Host $host;
        access_log off;
    }

    # Aggregated health check for all instances
    location /health/all {
        access_log off;
        return 200 "All instances healthy\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint
    location /metrics {
        proxy_pass http://face_detection_prefixed/metrics;
        proxy_set_header Host $host;
        access_log off;
    }

    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Try each upstream for static assets
        try_files $uri @static_assets;
        
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
    }

    # Fallback for static assets
    location @static_assets {
        proxy_pass http://face_detection_prefixed;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # API documentation or admin interface (if available)
    location /api/docs {
        proxy_pass http://face_detection_prefixed/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Rate limiting location (example)
    location /api/ {
        # Apply rate limiting if needed
        # limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://face_detection_prefixed/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        return 404 "Not Found\n";
        add_header Content-Type text/plain;
    }
    
    location = /50x.html {
        return 500 "Internal Server Error\n";
        add_header Content-Type text/plain;
    }
}

# Optional: HTTPS server block
# server {
#     listen 443 ssl;
#     server_name localhost;
#     
#     ssl_certificate /etc/ssl/certs/localhost.crt;
#     ssl_certificate_key /etc/ssl/private/localhost.key;
#     
#     # Same location blocks as above
# }