name: 🔧 Development Build and Test

on:
  push:
    branches:
      - develop
      - feature/*
    paths:
      - 'docker-app/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'docker-app/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    runs-on: apexalgo-iad-runners
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🛠️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🧪 Run tests
      run: |
        cd docker-app
        echo "🔍 Running application tests..."
        
        # Test if Dockerfile builds successfully
        docker build -t face-detection-test .
        
        # Test if container starts correctly
        docker run --name test-container -d -p 8080:8080 face-detection-test
        sleep 10
        
        # Test if health endpoint responds
        curl -f http://localhost:8080/health || exit 1
        
        # Test if main app loads
        curl -f http://localhost:8080/ || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
        echo "✅ All tests passed!"

    - name: 🏷️ Extract metadata for dev build
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,prefix=dev-
          type=ref,event=pr,prefix=pr-
          type=sha,prefix=dev-{{branch}}-

    - name: 🏗️ Build development Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker-app
        file: ./docker-app/Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📊 Generate build summary
      run: |
        echo "## 🔧 Development Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Event:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          echo "**Tags:** \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Development Usage:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Tests Status:" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 Docker build: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- 🏥 Health check: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 App loading: ✅ Passed" >> $GITHUB_STEP_SUMMARY